generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ContentType {
  QUIZ
  ASSIGNMENT
  EXAM
}

enum Role {
  ADMIN
  FACULTY
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id             String                    @id @default(auto()) @map("_id") @db.ObjectId
  email          String                    @unique
  password       String
  name           String
  role           Role                      @default(FACULTY)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  contents       Content[]
  facultyCourses FacultyCourseAssignment[]
  ActivityLog    ActivityLog[]
}

model Course {
  id                 String                    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  code               String                    @unique
  description        String?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  clos               CLO[]
  contents           Content[]
  facultyAssignments FacultyCourseAssignment[]
}

model FacultyCourseAssignment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  facultyId  String   @db.ObjectId
  courseId   String   @db.ObjectId
  assignedAt DateTime @default(now())
  faculty    User     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([facultyId, courseId])
}

model CLO {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  number      Int
  courseId    String   @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Content {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      ContentType
  questions Json
  courseId  String      @db.ObjectId
  course    Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  facultyId String      @db.ObjectId
  faculty   User        @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
}
